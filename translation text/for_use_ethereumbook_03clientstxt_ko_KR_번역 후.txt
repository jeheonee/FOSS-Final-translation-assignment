[[ethereum_clients_chapter]]
== 이더리움 클라이언트

((("clients, Ethereum", id="ix_03clients-asciidoc0", range="startofrange"))) 이더리움 클라이언트는 다른 이더리움 클라이언트와 peer-to-peer 네트워크에서 소통하며 이더리움의 사양을 보충하는 소프트웨어 응용프로그램이다. 다른 이더리움 클라이언트는 그들이 참조 사양과 표준화된 통신 프로토콜을 준수하는 경우 상호 운영된다. 다른 클라이언트들이 다른 팀과 다른 프로그래밍 언어로 작성되었어도, 그들은 같은 프로토콜을 통해 소통하며 같은 규칙을 따른다. 그렇게 하여, 그들은 같은 이더리움 네트워크에서 상호 작용하고 운용될 수 있다.

이더리움은 오픈소스 프로젝트이고, 모든 주요 클라이언트의 소스코드는  오픈소스 라이센스(예: LGPL v3.0)하에 제공되며, 어떠한 목적으로든 무료로 다운로드 받고 사용할 수 있다. 오픈소스는 단순히 무료로 사용할 수 있다는 것 만을 의미하는 것이 아니다. 이더리움은 오픈소스 커뮤니티에서 누구든지 자유롭게 수정할 수 있다는 것을 의미이기도 하다. 보는 사람이 많을수록 더 믿을 수 있는 코드가 된다. 

((("Yellow Paper specification"))) 이더리움은 "Yellow Paper"라고 불리는 공식적인 사양에 의해 정의된다. (<1> 참조).

((("Bitcoin","Ethereum definition compared to"))) 예를 들어, 이것은 어떠한 공식적인 방법으로 정의되지 않은 비트코인과 비교할 수 있다. 비트코인의 사양이 기준 구현 Bitcoin Core이고, 이더리움의 사양은 영어와 수학(공식적인)의 사양을 결합한 논문에 문서화된다. 다양한 이더리움 개선 제안사항 외에도 이러한 공식 사양은, 이더리움 패스의 표준 동작을 정의한다:[1client1]. Yellow Paper는 주기적으로 패스를 완성하기 위해 업데이트된다:[2Ethereum2].

이더리움의 명확한 공식 사양의 결과로, 독립적으로 개발된 많은 이더리움 클라이언트의 소프트웨어 구현이 상호 운용된다. 이더리움은 다른 어떠한 블록체인보다 네트워크에서 실행되는 구현이 다양한데, 이는 일반적으로 장점으로 평가된다. 예를 들어, 특정 클라이언트의 구현 전략을 이용하는 것은 개발자들이 개발사항을 패치하는 데 번거로움을 주지만, 다른 클라이언트들은 거의 영향을 받지 않기 때문에 네트워크에 대한 공격을 방어하는 훌륭한 방법이 입증되었다. 

=== 이더리움 네트워크

((("clients, Ethereum","Ethereum-based networks and", id="ix_03clients-asciidoc1", range="startofrange")))((("networks (Ethereum)","clients and", id="ix_03clients-asciidoc2", range="startofrange"))) 이더리움 Yellow Paper에 정의된 공식 사양을 대부분 만족하지만, 서로 상호 운용될 수도, 혹은 그렇지 않을 수도 있는 이더리움 기반 네트워크가 존재한다.

이러한 이더리움 기반 네트워크에는 이더리움, 이더리움클래식, Ella, Expanse, Ubiq, Musicoin등이 존재한다. 대부분이 프로토콜 수준에서 호환되지만, 각각의 네트워크를 지원하기 위해 이더리움 클라이언트 소프트웨어 관리자는 작은 변경 사항이 있는 특징과 속성들을 가지고 있다. 이러한 이유 때문에, 모든 버전의 이더리움 클라이언트 소프트웨어가 모든 이더리움 기반 블록체인에서 구동되는 것은 아니다. 

현재, 이더리움 프로토콜은 6개의 주요 구현 사항이 있고 6개의 다른 언어로 작성되었다.

* Parity, Rust로 작성됨
* Geth, Go로 작성됨
* +cpp-ethereum+, Cpass:[++]로 작성됨
* +pyethereum+, Python으로 작성됨
* Mantis, Scala로 작성됨
* Harmony, Java로 작성됨

이 섹션에서, 우리는 가장 일반적인 클라이언트인 Parity와 Geth를 살펴볼 것이다. 각 클라이언트를 사용하여 노드를 설정하는 법과 명령어 옵션 및 application programming interfaces(APIs)를 살펴볼 것이다.

[[full_node_importance]]
==== 전체 노드를 실행해야 할까?

((("full node","Ethereum-based networks and", id="ix_03clients-asciidoc3", range="startofrange")))((("networks (Ethereum)","full nodes and", id="ix_03clients-asciidoc4", range="startofrange"))) 블록체인의 상태, 복원력, 검열 저항성은 독립적이고 지리적으로 분산된 많은 전체 노드를 가진 블록체인에 따라 달라진다. 각각의 전체 노드는 운영자에게 모든 거래와 계약에 대한 권위적이고 독립적인 검증을 제공하며 다른 새로운 노드들이 그들의 작동을 bootstrap할 수 있는 블록 데이터를 얻도록 도와줄 수 있다.

그러나, 전체 노드를 실행하면 하드웨어 자원과 대역폭에 대한 비용이 발생한다. 전체 노드는 80&#x2013;300GB의 데이터를 다운로드하고(클라이언트 설정에 따라 다름, 2020년 1월 기준) 로컬 하드 드라이브에 저장해야 한다. 이러한 데이터 부담은 매일 새로운 거래와 블록이 추가됨에 따라 상당히 빠르게 증가한다. 우리는 이러한 주제에 대해 <1>에서 자세하게 다룰 것이다.

mainnet 라이브 네트워크에서 전체 노드를 작동하는 것은 이더리움 개발에 있어서 필수 사항이 아니다. testnet(더 작은 공공 테스트 블록체인중 하나에 연결)에 Ganache와 같은 로컬 사설 블록체인을 사용하거나, Infura와 같은 서비스 제공자가 제공하는 클라우드 기반 이더리움 클라이언트를 사용하여 필요한 거의 모든 작업을 끝낼 수 있다.

원격 클라이언트를 실행하면 블록체인의 로컬 복사본을 저장하거나 거래의 유효성을 검사하지 않는다. 이러한 클라이언트는 지갑의 기능을 제공하며 거래를 만들거나 전파할 수 있다. 원격 클라이언트는 사용자의 전체 노드, 공공 블록체인, 공공 또는 허가된 testnet, 사설 로컬 블록체인과 같은 이미 존재하는 기존 네트워크에 연결하여 사용할 수 있다. 실제로 MetaMask, Emerald Wallet, pass:[1MyEtherWallet1], 또는 MyCrypto와 같은 원격 클라이언트를 사용하여 다른 모든 노드 옵션 사이에서 편리하게 전환하여 사용할 수 있다.

((("remote clients","wallet compared to")))((("wallets","remote clients compared to"))) remote client와 wallet은 약간의 차이가 있지만 서로 바꿔 사용될 수 있다. 일반적으로, 원격 클라이언트는 지갑의 거래 기능 외에도 API(web3.js API 등)을 제공한다.

((("light/lightweight client"))) 이더리움의 원격 지갑 개념을 light client(Bitcoin에서 간편 결제 검증 클라이언트와 유사)와 혼동하지 마십시오. Light clients는 블록 헤더를 검증하고 Merkle 증명을 사용하여 블록체인에 거래가 포함됨을 검증하며 그 영향을 판단하여 전체 노드와 비슷한 수준의 보안성을 제공한다. 반대로, 이더리움 원격 클라이언트는 블록 헤더와 거래를 검증하지 않는다. 그들은 블록체인에 접근하는 full client를 완전히 신뢰하기 때문에 상당한 보안 및 익명성을 잃게 된다. 사용자가 직접 실행하는 full client를 사용하여 이런 문제를 완화할 수 있다.

[[full_node_adv_disadv]]
==== 전체 노드의 장점과 단점

((("full node","advantages/disadvantages"))) 전체 노드를 실행하는 것을 선택하면 노드를 연결하는 네트워크의 작동에 도움이 되며, 적당한 비용이 발생한다. 몇 가지 장점과 단점을 알아보자.

*장점:*

* 이더리움 기반 네트워크의 복원력과 검열 저항성 지원
* 모든 거래의 유효성 확인
* 중개자 없이 공공 블록체인의 모든 계약과 상호작용 가능
* 중개자 없이 퍼블릭 블록체인에 직접 계약을 배포 가능
* 오프라인에서 블록체인 상태(계정, 계약 등)를 query(읽기 전용)가능
* 읽고 있는 정보를 타인에 알리지 않고 블록체인 query 가능

*단점:*

* 상당히 증가하는 하드웨어 및 대역폭 자원 필요
* 처음 시작할 때 완전히 동기화하는 데 며칠이 걸릴 수 있음
* 동기화 상태를 유지하려면 유지 관리, 업그레이드, 온라인 상태를 유지해야 함 (((range="endofrange", startref="ix_03clients-asciidoc4")))(((range="endofrange", startref="ix_03clients-asciidoc3")))

[[pub_test_adv_disadv]]
==== 공공 Testnet의 장점과 단점

((("networks (Ethereum)","public testnet advantages/disadvantages")))((("public testnets")))((("testnet","public"))) 전체 노드를 실행하도록 선택하는 것과 관계 없이, 공공 testnet 노드를 실행하는 것을 선택하는 것을 원할 것이다. 공공 testnet사용의 장점과 단점을 알아보자.

*장점:*

* testnet 노드는 동기화하고 저장해야 하는 데이터 양이 훨씬 적으며 네트워크에 따라 약 45GB
* testnet 노드는 몇 시간 안에 완전히 동기화됨
* 계약을 전개하거나 거래를 하려면 test ether가 필요한데, 이는 가치가 없고 여러 "faucets"로부터 무료로 얻을 수 있음
* testnet은 "live"를 실행하는 많은 다른 사용자 및 계약을 포함하는 공공 블록체인임

*단점:*

* 실제 돈은 testnet에서 사용할 수 없음. test ether에서 실행됨. 따라서 얻을 수 있는 것이 없기 때문에 실제 적에 대해 보안을 테스트할 수 없음.
* 공공 블록체인의 경우 testnet에서 현실적으로 테스트할 수 없는 측면이 있음. 예를 들어, 거래 수수료는 거래를 보내는 데 필수적이지만, 가스는 무료이기 때문에 testnet에서는 고려사항이 아님. 또한, testnet은 공공 mainnet이 때때로 경험하는 것과 같은 네트워크 혼잡을 경험하지 않음.

[[localtest_adv_dis]]
==== 로컬 블록체인 시뮬레이션의 장점과 단점

((("Ganache","advantages/disadvantages")))((("local blockchain simulation")))((("networks (Ethereum)","local blockchain simulation advantages/disadvantages")))((("private blockchain")))((("single-instance private blockchain"))) 여러 가지 테스트 목적으로, 최고의 옵션은 single-instance 사설 블록체인을 개설하는 것이다. Ganache(formerly named +testrpc+)는 다른 참가자 없이 상호 작용할 수 있는 가장 인기 있는 로컬 블록체인 시뮬레이션 중 하나이다. 그것은 공공 testnet의 장점과 단점을 공유하지만, 몇몇 차이점도 존재한다.

*장점:*

* 동기화가 필요 없고 디스크에 데이터가 거의 없다. 첫 번째 블록은 사용자가 직접 마이닝함.
* test ether를 획득할 필요가 없음. 테스트에 사용할 수 있는 보상을 스스로 "award"할 수 있음.
* 다른 사용자는 없고 너만 있음
* 다른 계약이 없으며, 개설 후 배포하면 됨

*단점:*

* 다른 사용자가 없다는 것은 공공 블록체인과 동일하게 동작하지 않는다는 것을 의미함. 거래 공간이나 pass:[1transactions1]순서에 대한 경쟁이 없음.
* 당신 말고 다른 채굴자가 없다는 것은 채굴이 더 예측 가능하다는 것을 의미하기 때문에 공공 블록체인에서 발생하는 일부 시나리오를 테스트할 수 없음.
* 다른 계약이 없다는 것은 종속성 및 계약 라이브러리를 포함하여 테스트하고 싶은 모든 계약을 스스로 배포해야 함.
* 일부 공공 계약과 해당 주소를 재생성하여 일부 시나리오를 테스트할 수 없음 (예: the DAO contract).(((range="endofrange", startref="ix_03clients-asciidoc2")))(((range="endofrange", startref="ix_03clients-asciidoc1"))).


[[running_client]]
=== 이더리움 클라이언트 실행

((("clients, Ethereum","running", id="ix_03clients-asciidoc5", range="startofrange"))) 만약 당신이 시간과 자원이 있는 경우 프로세스에 대해 자세히 알기 위해서라도 전체 노드를 실행할 필요가 있다. 이 섹션에서, 이더리움 클라이언트인 Parity와 Geth를 다운로드하고 컴파일하며 실행하는 방법을 다룰 것이다. 이를 위해 당신의 운영체제에서 명령어 인터페이스를 사용하는 데 익숙할 필요가 있다. 전체 노드로 실행하든, testnet 노드로 실행하든, 로컬 사설 블록체인 클라이언트로 실행하든 관계없이 이러한 클라이언트를 설치할 가치가 있다.

[[requirements]]
==== 전체 노드를 위한 하드웨어 요구 사항

((("clients, Ethereum","full node hardware requirements")))((("full node","hardware requirements"))) 시작하기 전에, 이더리움 전체 노드를 실행할 수 있는 충분한 자원이 갖춰진 컴퓨터가 있어야 한다. 이더리움 블록체인의 전체 사본을 저장하기 위해 최소 300GB의 디스크 공간이 필요하다. 이더리움 testnet에서 전체 노드를 실행하려면 최소한 45GB의 추가 공간이 필요하다. 345GB의 블록체인 데이터를 다운받기 위해 많은 시간이 걸리기 때문에 고속 인터넷 연결 환경에서 작업하기를 추천한다.

이더리움 블록체인을 동기화하는 것은 입출력(I/O)에 집중되어 있다. 최고의 선택은 solid-state drive(SSD)이다. 만약 hard disk drive(HDD)를 사용하는 경우 캐쉬로 사용하기 위해 최소한 8GB의 RAM이 필요하다. 그렇지 않으면 시스템을 완전히 동기화하기에 너무 느릴 것이다.

*최소 요구 사양:*

* 2코어 이상의 CPU
* 최소 300GB의 사용 가능한 저장 공간
* SSD가 있는 경우 최소 4GB RAM, HDD가 있는 경우 8GB 이상
* 8 MBit/sec 다운로드 가능한 인터넷 서비스

이것들이 이더리움 기반의 블록체인의 전체 사본(필요없는 것들이 제거된)을 동기화하기 위한 최소한의 요구사항이다.

Parity 코드를 기반으로 작성하면 자원을 더 적게 소모하기 때문에, 제한된 하드웨어로 실행하는 경우 Parity를 사용하여 더 나은 결과를 얻을 수 있다.

합리적인 시간으로 동기화를 진행하고, 이 책에서 다루는 개발 도구들, 라이브러리, 클라이언트, 블록체인들을 저장하고자 한다면 더 성능이 뛰어난 컴퓨터를 원할 것이다.

*권장 사양:*

* 4코어 이상의 고성능 CPU
* 16 GB이상의 RAM
* 최소 500GB의 여유 공간이 있는 고성능 SSD
* 25+ MBit/sec 다운로드 가능한 인터넷 서비스

블록체인의 크기가 얼마나 빨리 증가할지, 언제 더 많은 디스크 공간이 필요할지 예측하는 것은 어렵기 때문에, 동기화를 시작하기 전에 블록체인의 최신 크기를 확인하는 것을 추천한다.

[NOTE]
====
이 곳에 나열된 디스크 크기 요구사항은 블록체인이 오래된 상태의 데이터를 "pruned(제거)"하는 것을 기본 설정으로 하여 노드를 실행하는 것을 가정한다. 모든 상태가 디스크에 저장되도록 하는 전체 "archival" 노드를 실행하고자 한다면, 1TB이상의 디스크 공간이 필요할 수 있다.
====

이 링크들은 블록체인 크기에 대한 최신 추정치를 제공한다.

* https://bitinfocharts.com/ethereum/[Ethereum]

* https://bitinfocharts.com/ethereum%20classic/[Ethereum Classic]

[[sw_reqs]]
==== 클라이언트(노드) 구축 및 실행을 위한 소프트웨어 요구 사항

((("clients, Ethereum","software requirements for building/running", id="ix_03clients-asciidoc6", range="startofrange"))) 이 섹션에서는 Parity와 Geth 클라이언트 소프트웨어에 대해 다룬다. 또한 Unix 명령어 환경을 사용하는 것으로 가정한다. 다음은 bash shell(명령어 실행 환경)에서 실행하는 Ubuntu GNU/Linux 운영체제에서 표시되는 명령어 출력을 보여주는 예시이다.

일반적으로 모든 블록체인은 자체적인 Geth 버전을 가지고 있지만 Parity는 동일한 클라이언트 다운로드로 다중 이더리움 기반 블록체인(Ethereum, Ethereum Classic, pass:[1Ellaism1], Expanse, Musicoin)을 지원한다.

[TIP]
=====
((("$ symbol")))((("command-line interface")))((("shell commands")))((("terminal applications"))) 이 챕터의 많은 예시에서, "terminal" 응용 프로그램을 통해 엑세스하는 운영체제의 명령어 인터페이스(shell 등)를 사용한다. shell에서 프롬프트를 표시하고 명령어를 입력하면 shell은 일부 텍스트와 다음 명령에 대한 새로운 프롬프트로 응답한다. 프롬프트는 당신의 시스템과 다르게 보일 수 있지만, 다음 예시에서 $ 기호로 표시된다. 예시에서 $ 기호 뒤에 텍스트가 보이면 $ 기호를 입력하지 말고 바로 뒤에 명령어(굵게 표시됨)를 입력한 다음 Enter키를 입력하여 명령어를 실행한다. 예시에서 각 명령어 아래의 행은 운영체제의 해당 명령어에 대한 응답이다. 다음 $ 접두사가 보이면, 당신은 새로운 명령어임을 확인할 수 있으며 이 과정을 반복해야 한다.
=====

시작하기 전에, 몇 개의 소프트웨어를 설치해야 한다. 사용 중인 컴퓨터에서 소프트웨어 개발을 해본 적이 없다면 몇 가지 기본 도구들을 설치해야 할 것이다. 다음 예시에서 소스코드 관리 프로그램인 Git, Go 프로그래밍 언어와 표준 라이브러리인 golang, 시스템 프로그래밍 언어인 Rust를 설치해야 한다.

((("git")))위 링크에서 안내사항을 따라 Git을 설치할 수 있다. https://git-scm.com[].

((("Go", seealso="Geth (Go-Ethereum)"))) 위 링크에서 안내사항을 따라 Go를 설치할 수 있다. https://golang.org[], Ubuntu환경을 사용한다면 위 링크에서 설치할 수 있다. https://github.com/golang/go/wiki/Ubuntu[]

[NOTE]
=====
((("Geth (Go-Ethereum)"))) Geth의 요구사항은 다양하지만 Go 1.10버전 혹은 그 이상을 사용한다면 원하는 버전의 Geth를 모두 컴파일 할 수 있다. 물론 선택한 Geth의 공식 문서를 항상 참조해야 한다.

당신의 운영체제에 설치되어 있거나, 시스템 패키지 매니저가 사용할 수 있는 golang 버전이 1.10보다 꽤 오래된 버전일 수 있다. 만약 그렇다면 golang을 지우고 최신 버전을 다운로드 해야 한다.https://golang.org/[].
=====

((("Rust"))) 위 링크에서 안내사항을 따라 Rust를 설치할 수 있다. https://www.rustup.rs/[].

[NOTE]
=====
Parity는 Rust 1.27 이상의 버전을 필요로 한다.
=====

((("Parity","libraries for"))) Parity는 OpenSSL과 libudev와 같은 소프트웨어 라이브러리를 필요로 한다. Ubuntu또는 Debian GNU/Linux와 같은 환경에서 이것들을 설치하기 위해, 위 과정을 이용하십시오:[1command1]:

++++
<pre data-type="programlisting">
$ <strong>sudo apt-get install openssl libssl-dev libudev-dev cmake clang</strong>
</pre>
++++

다른 운영체제 환경이라면, 당신의 OS의 패키지 매니저를 사용하거나 위 링크에서 필요한 라이브러리를 다운로드 하십시오. https://github.com/paritytech/parity/wiki/Setup[Wiki instructions]

이제 git, golang, Rust, 및 필요한 라이브러리를 설치했고 작업을 시작합시다!

[[parity]]
==== Parity

((("clients, Ethereum","Parity and")))((("Parity","basics"))) Parity는 전체 노드 클라이언트와 DApp browser를 구현하였다. 처음 &#x201c부터 &#x201d까지 시스템 프로그래밍 언어인 Rust로 작성되었고 모듈화, 안전, 확장 가능한 이더리움 클라이언트 구축을 목적으로 작성되었다. Parity는 영국 회사인 Parity Tech가 개발했고 GPLv3 free 오픈소스 라이센스로 출시되었다.

[NOTE]
=====
폭로 : 이 책의 저자 중 한 명인 Gavin Wood박사는 Parity Tech의 설립자이며 Parity client의 많은 부분을 저술하였다. Parity는 설치된 이더리움 클라이언트 기반의 약 25%를 차지하고 있다.
=====

Parity를 설치하기 위해 Rust 패키지 매니저인 cargo를 사용하거나 GitHub에서 소스코드를 다운로드하면 된다. 패키지 매니저 역시 소스코드를 다운로드하기 때문에, 두 옵션 사이에 큰 차이가 없다. 다음 섹션에서, 직접 Parity를 다운로드하고 컴파일하는 법을 보여준다.

[[install_parity]]
===== Parity 설치

((("Parity","installing"))) https://wiki.parity.io/Setup[Parity Wiki]에서는 다양한 환경 및 컨테이너에서 Parity를 구축하는 방법을 제공한다. 소스에서 Parity를 구축하는 방법을 보여줄 것이다. 당신이 이미 rustup(see <1>)을 사용하여 Rust를 설치하였다고 가정한다.

먼저, GitHub에서 소스코드를 다운로드 한다.

++++
<pre data-type="programlisting">
$ <strong>git clone https://github.com/paritytech/parity</strong>
</pre>
++++

그 다음 parity 디렉토리로 이동하고 cargo를 이용하여 실행할 명령어를 작성한다.

++++
<pre data-type="programlisting">
$ <strong>cd parity</strong>
$ <strong>cargo install --path .</strong>
</pre>
++++

모두 잘 작동하였다면, 이러한 결과를 볼 수 있다.

++++
<pre data-type="programlisting">
$ <strong>cargo install --path .</strong>
parity-ethereum 설치 v2.7.0 (/root/parity)
Updating crates.io index
Updating git repository `https://github.com/paritytech/rust-ctrlc.git`
Updating git repository `https://github.com/paritytech/app-dirs-rs`   Updating git repository 

 [...]

Compiling parity-ethereum v2.7.0 (/root/parity)
Finished release [optimized] target(s) in 10m 16s
Installing /root/.cargo/bin/parity
Installed package `parity-ethereum v2.7.0 (/root/parity)` (executable `parity`)
$
</pre>
++++

--version 옵션을 실행하여 parity가 설치되었는지 확인한다.


++++
<pre data-type="programlisting">
$ <strong>parity --version</strong>
Parity 이더리움 클라이언트
  version Parity-Ethereum/v2.7.0-unstable-b69a33b3a-20200124/x86_64-unknown-linux-gnu/rustc1.40.0
Copyright 2015-2020 Parity Technologies (UK) Ltd.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
이것은 무료 소프트웨어이므로 자유롭게 변경 및 재배포할 수 있다.
There is NO WARRANTY, to the extent permitted by law.

By Wood/Paronyan/Kotewicz/Drwięga/Volf/Greeff
   Habermeier/Czaban/Gotchac/Redman/Nikolsky
   Schoedon/Tang/Adolfsson/Silva/Palm/Hirsz et al.
$
</pre>
++++

훌륭합니다! 이제 Parity가 설치되었고, 블록체인을 동기화하고 몇 가지 기본적인 명령어 옵션을 시작할 수 있다.

[[go_ethereum_geth]]
==== Go-Ethereum (Geth)

((("clients, Ethereum","Geth and", id="ix_03clients-asciidoc7", range="startofrange")))((("Geth (Go-Ethereum)","basics", id="ix_03clients-asciidoc8", range="startofrange"))) Geth는 이더리움 재단에서 적극적으로 개발중인 Go언어 기반 구현체이다. 따라서 이더리움 클라이언트의 "공식" 구현으로 고려된다. 일반적으로 모든 이더리움 기반의 블록체인은 자체적인 Geth 구현이 존재한다. 만약 Geth를 실행 중인 경우, 다음 저장소 링크 중 하나를 사용하여 블록체인에 대한 올바른 버전을 가져올 수 있다.


* https://github.com/ethereum/go-ethereum[Ethereum] (or https://geth.ethereum.org/)

* https://github.com/etclabscore/go-ethereum[Ethereum Classic]

* https://github.com/ellaism/go-ellaism[Ellaism]

* https://github.com/expanse-org/go-expanse[Expanse] 

* https://github.com/Musicoin/go-musicoin[Musicoin] 

* https://github.com/ubiq/go-ubiq[Ubiq] 

[NOTE]
=====
이런 지시사항들을 건너 뛰고, 선택한 플랫폼에 미리 컴파일된 바이너리 파일을 설치할 수 있다. 미리 컴파일된 릴리스는 설치가 매우 쉽고 이 곳에 나열된 "releases" 섹션에서 살펴볼 수 있다. 하지만 소프트웨어를 직접 다운로드하고 컴파일하여 더 많은 것을 배울 수 있다.
=====

[[cloning_repo]]
===== 저장소 클론하기

((("Geth (Go-Ethereum)","cloning Git repo for"))) 첫 번째 단계는 Git 저장소를 클론하여 소스코드의 복사본을 얻는 것이다.

선택한 저장소의 로컬 클론을 만들기 위해 홈 디렉토리 또는 당신이 개발에 사용하는 디렉토리에서 다음과 같은 git 명령어를 입력해야 한다.

++++
<pre data-type="programlisting">
$ <strong>git clone &lt;Repository Link&gt;</strong>
</pre>
++++

당신의 로컬 시스템에 저장소를 복사할 때 다음과 같이 진행률을 볼 수 있다.

[[cloning_status]]
----
Cloning into 'go-ethereum'...
remote: Enumerating objects: 86915, done.
remote: Total 86915 (delta 0), reused 0 (delta 0), pack-reused 86915
Receiving objects: 100% (86915/86915), 134.73 MiB | 29.30 MiB/s, done.
Resolving deltas: 100% (57590/57590), done.
----

훌륭합니다! 이제 Geth의 로컬 복사본을 가지게 되었고 당신의 플랫폼에서 실행 파일을 컴파일할 수 있다.

[[build_geth_src]]
===== 소스코드로 Geth 빌드하기

((("Geth (Go-Ethereum)","building from source code"))) Geth를 빌드하기 위해 소스코드가 다운로드 된 디렉토리로 변경하고 make 명령어를 사용해야 한다.

++++
<pre data-type="programlisting">
$ <strong>cd go-ethereum</strong>
$ <strong>make geth</strong>
</pre>
++++

모두 잘 작동하였다면, Go 컴파일러가 Geth 실행파일을 생성하기 전까지 각 구성 요소를 빌드하는 것을 볼 수 있다.

[[making_geth_status]]
----
build/env.sh go run build/ci.go install ./cmd/geth
>>> /usr/local/go/bin/go install -ldflags -X main.gitCommit=58a1e13e6dd7f52a1d...
github.com/ethereum/go-ethereum/common/hexutil
github.com/ethereum/go-ethereum/common/math
github.com/ethereum/go-ethereum/crypto/sha3
github.com/ethereum/go-ethereum/rlp
github.com/ethereum/go-ethereum/crypto/secp256k1
github.com/ethereum/go-ethereum/common
[...]
github.com/ethereum/go-ethereum/cmd/utils
github.com/ethereum/go-ethereum/cmd/geth
빌드 완료
geth를 실행하기 위해 "build/bin/geth"를 실행한다.
$
----

geth를 실제로 실행하지 않고 geth가 작동하는지 확인하겠습니다.

++++
<pre data-type="programlisting">
$ <strong>./build/bin/geth version</strong>

Geth
Version: 1.9.11-unstable
Git Commit: 0b284f6c6cfc6df452ca23f9454ee16a6330cb8e
Git Commit Date: 20200123
Architecture: amd64
Protocol Versions: [64 63]
Go Version: go1.13.4
Operating System: linux
[...]
</pre>
++++

당신의 geth version 명령어는 약간 다른 정보를 표시할 수 있다. 하지만 여기서 볼 수 있는 매우 유사한 버전 리포트를 볼 수 있다.

다음 섹션에서는 이더리움 블록체인의 초기 동기화의 어려움을 설명한다.(((range="endofrange", startref="ix_03clients-asciidoc6"))).(((range="endofrange", startref="ix_03clients-asciidoc5")))


[[first_sync]]
=== 이더리움 기반 블록체인의 첫 번째 동기화

((("blockchain","first synchronization of", id="ix_03clients-asciidoc9", range="startofrange")))((("clients, Ethereum","first synchronization of Ethereum-based blockchains", id="ix_03clients-asciidoc10", range="startofrange")))((("first synchronization","of Ethereum-based blockchains", id="ix_03clients-asciidoc11", range="startofrange"))) 기존에는 이더리움 블록체인을 동기화할 때, genesis block부터 가장 초기의 &#x2014;i.e.까지 당신의 클라이언트는 모든 블록과 거래를 다운로드하고 검증하였다.

이런 방식으로 블록체인을 완전히 동기화하는 것은 가능하지만, 이러한 유형의 동기화는 시간이 매우 많이 걸리고 상당한 자원을 요구한다(RAM이 훨씬 많이 필요하고, 고성능 저장장치가 없다면 매우 오랜 시간이 걸린다).

많은 이더리움 기반 블록체인은 2016년 말 denial-of-service(서비스 거부 공격)의 희생양이 되었다. 영향을 받은 블록체인은 완전히 동기화하는 과정에서 느리게 동기화되는 경향이 있었다.

예를 들어, 이더리움에서 새로운 클라이언트가 2,283,397 블록에 도달할 때 까지 빠르게 진행된다.이 블록은 2016년 9월 18일에 채굴되었고 DoS 공격의 시작을 의미한다. 이 블록에서 2,700,031 블록(2016년 11월 26일)까지 거래 검증이 극단적으로 느려지며 메모리 집약적이고 입출력 집약적이다. 이로 인하여 유효성 검증 시간이 블록당 1분을 초과하게 되었다. 이더리움은 DoS공격에서 악용된 내재된 취약점을 개선하기 위하여 하드포크를 이용한 일련의 업그레이드를 구현하였다. 이러한 업그레이드는 스팸 거래로 인해 생성된 약 2백만 개의 빈 계정을 삭제하여 블록체인을 청소하였다.

전체 유효성을 동기화하는 경우, 당신의 클라이언트는 속도가 느려지고 DoS 공격의 영향을 받는 블록을 검증하기 위해 며칠 또는 그 이상이 걸릴 수 있다.

((("fast synchronization"))) 다행히 대부분의 이더리움 클라이언트는 기본적으로 "fast" 동기화를 수행하는데 블록체인 tip과 동기화될 때까지 거래의 유효성 검사를 건너뛰었다가 전체 유효성 검사를 재개한다.

Geth는 이더리움에서 기본적으로 fast 동기화를 수행한다. 선택한 다른 이더리움 체인에 대해 구체적인 지시사항을 참조해야 할 수도 있다.

Parity는 또한 기본적으로 fast 동기화를 수행한다.

[NOTE]
=====
Geth는 빈 블록 데이터베이스로 시작할 때에만 fast 동기화를 수행한다. 이미 fast mode로 동기화를 시작하지 않았다면 Geth를 바꿀 수 없다. 블록체인 데이터 저장소를 지우고 시작부터 fast 동기화를 시작하는 것이 완전 검증으로 동기화를 계속 진행하는 것보다 더 빠르다. 블록체인 데이터를 삭제할 때 지갑이 삭제되지 않도록 주의해야 한다!
=====

==== Geth 또는 Parity 실행

((("first synchronization","Geth or Parity for")))((("Geth (Go-Ethereum)","for first synchronization")))((("Parity","for first synchronization"))) 이제 "첫 번째 동기화"의 어려움을 이해했고 이더리움 클라이언트를 시작하고 동기화할 준비가 되었다. Geth와 Pariry모두 --help옵션을 사용하여 모든 구성 파라미터를 확인할 수 있다. 기본 설정은 일반적으로 적당하고 대부분의 용도에 부합한다. 당신의 필요에 맞게 옵션을 설정하고 Geth 또는 Parity를 시작하여 체인을 동기화한다. 그리고 기다려보자..

[TIP]
====
이더리움 블록체인을 동기화할 때 RAM이 많은 고성능 시스템에서 반나절 정도, 느린 시스템에서 며칠이 걸릴 수 있다.
====

[[json_rpc]]
==== The JSON-RPC Interface

((("clients, Ethereum","and JSON-RPC API", id="ix_03clients-asciidoc12", range="startofrange")))((("first synchronization","and JSON-RPC API", id="ix_03clients-asciidoc13", range="startofrange")))((("JSON-RPC API", id="ix_03clients-asciidoc14", range="startofrange"))) 이더리움 클라이언트는 API와 Remote Procedure Call(RPC) 명령어를 제공하는데 자바스크립트 객체 표기법(JSON)으로 인코딩되어있다. 이것을 JSON-RPC API라고 부른다. 본질적으로, JSON-RPC API는 이더리움 클라이언트를 이더리움 네트워크와 블로게인의 게이트웨이로 사용하는 프로그램을 작성하도록 도와주는 인터페이스이다.

일반적으로, RPC 인터페이스는 포트번호 8545에서 HTTP 서비스로 제공된다. 보안상의 이유로 기본적으로 localhost(127.0.0.1과 같은 자신의 컴퓨터 주소 IP)의 연결만을 허용한다.

JSON-PRC API에 엑세스하기 위해 각각의 사용 가능한 RPC 명령어에 대응되는 "stub" 함수 호출을 제공하는 특수 라이브러리(당신이 선택한 프로그래밍 언어로 작성된)를 사용하거나 수동으로 HTTP 요청을 구성하고 JSON 인코딩 요청을 보내고 받을 수 있다. RPC 인터페이스를 호출하기 위해 curl과 같은 generic HTTP 클라이언트 명령어를 사용할 수도 있다. 한번 시도해 보자. 먼저, 당신이 Geth를 실행하고 있고, HTTP가 RPC 인터페이스에 엑세스할 수 있도록 --rpc 설정을 완료했다고 가정한다. 다음과 같이 새로운 터미널 창(예: 이미 존재하는 터미널 창에서 Ctrl-Shift-N 또는 Ctrl-Shift-T)으로 전환한다. 

++++
<pre data-type="programlisting">
$ <strong>curl -X POST -H "Content-Type: application/json" --data \
  '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
  http://localhost:8545</strong>

{"jsonrpc":"2.0","id":1,
"result":"Geth/v1.9.11-unstable-0b284f6c-20200123/linux-amd64/go1.13.4"}
</pre>
++++

이 예시에서, curl을 사용하여 http://localhost:8545주소에 HTTP 연결을 완성했다. 이미 포트번호 8545에서 HTTP 서비스로 JSON-PRC API를 제공하는 geth를 실행하고 있다. curl에서 HTTP POST 명령어를 사용하고 application/json 타입으로 콘텐츠를 식별하도록 지시했다. 마지막으로, HTTP 요청의 data 구성요소로서 JSON으로 인코딩된 요청을 전달한다. 대부분의 명령어는 HTTP 연결을 완성하기 위해 curl을 설정한다. 흥미로운 부분은 실제 JSON-RPC 명령어이다.

[[JSON_RPC_command]]
----
{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}
----

JSON-PRC 요청은 https://www.jsonrpc.org/specification[JSON-RPC 2.0 specification]의 구조를 따른다. 각각의 요청은 4개의 요소를 가지고 있다.

++jsonrpc++: JSON-PRC 프로토콜의 버전이다. 반드시 2.0이어야 한다.

++method++: 호출할 메소드의 이름이다.

++params++:: 메소드를 호출하는 동안 사용할 파라미터 값을 보유하고 있는 구조화된 값이다. 이 멤버는 생략될 수 있다.

++id++:: 클라이언트가 설정할 식별자로, String, Number, NULL값이 포함되어야 한다. 서버는 응답 객체가 포함되어 있는 경우 동일한 값으로 응답해야 한다. 이 멤버는 두 객체 간의 문맥을 연관시킬 때 사용된다.

[TIP]
====
((("batching"))) id 파라미터는 주로 batching이라고 불리는 single JSON-RPC 호출에서 여러 개의 요청을 할 때 먼저 사용된다. Batching은 모든 요청에 대해 새로운 HTTP, TCP 연결의 오버헤드를 피하기 위해 사용된다. 예를 들어, 이더리움 문맥에서 하나의 HTTP 연결을 통해 수천 개의 거래를 검색하기 위해 Batching을 사용한다. Batching을 할 때, 각 요청에 대해 다른 id를 설정하고 JSON-RPC 서버의 각 응답에 존재하는 id와 일치시킨다. 이를 구현하기 위한 가장 쉬운 방법은 카운터를 유지하여 각 요청의 값을 증가 시키는 것이다.
====


응답 내용은 다음과 같다:

----
{"jsonrpc":"2.0","id":1,
"result":"Geth/v1.9.11-unstable-0b284f6c-20200123/linux-amd64/go1.13.4"}
----

이것은 JSON-RPC API가 Geth 클라이언트 버전 1.13.4로 제공됨을 알려준다.

더 흥미로운 것을 해보자. 다음 예시에서, JSON-RPC API에 현재 가스의 가격을 물어볼 것이다.

++++
<pre data-type="programlisting">
$ <strong>curl -X POST -H "Content-Type: application/json" --data \
  '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":4213}' \
  http://localhost:8545</strong>

{"jsonrpc":"2.0","id":4213,"result":"0x430e23400"}
</pre>
++++

0x430e23400라는 응답은 현재 가스 가격이 18gwei(gigawei 또는 billion wei)임을 알려준다. 만약 당신이 16진법을 사용하지 않는다면, 명령어에서 약간의 bash-fu로 그것을 십진수로 변환할 수 있다:

++++
<pre data-type="programlisting">
$ <strong>echo $((0x430e23400))</strong>

18000000000
</pre>
++++

전체 JSON-RPC API는 https://github.com/ethereum/wiki/wiki/JSON-RPC[Ethereum wiki]에서 조사할 수 있다.

[[parity_compatibility_mode]]
===== Parity의 Geth 호환성 모드

Parity는 특별한 "Geth 호환성 모드"를 가지고 있고, Geth가 제공하는 것과 동일한 JSON-RPC API를 제공한다. Parity에서 이 모드를 실행하기 위해 --geth를 실행하여 전환한다. (((range="endofrange", startref="ix_03clients-asciidoc14")))(((range="endofrange", startref="ix_03clients-asciidoc13")))(((range="endofrange", startref="ix_03clients-asciidoc12"))):(((range="endofrange", startref="ix_03clients-asciidoc11")))(((range="endofrange", startref="ix_03clients-asciidoc10")))(((range="endofrange", startref="ix_03clients-asciidoc9")))

++++
<pre data-type="programlisting">
$ <strong>parity --geth</strong>
</pre>
++++

[[lw_eth_clients]]
=== 원격 이더리움 클라이언트

((("clients, Ethereum","remote", id="ix_03clients-asciidoc15", range="startofrange")))((("remote clients", id="ix_03clients-asciidoc16", range="startofrange"))) 원격 클라이언트는 전체 클라이언트의 기능 중 일부를 제공한다. 이들은 전체 이더리움 블록체인을 저장하지 않아서 속도가 빠르며 저장 공간을 훨씬 덜 필요로 한다.

[role="pagebreak-before"]
이러한 클라이언트는 일반적으로 다음 중 하나 이상의 기능을 제공한다:

* 지갑에서 개인 키와 이더리움 주소를 관리
* 거래를 작성, 서명 및 브로드캐스트
* 데이터 페이로드를 사용하여 스마트 계약과 상호 작용
* DApp와 검색하고 상호 작용
* 블록 탐색기와 같은 외부 서비스에 대한 링크를 제공
* ether unit를 변환하고 외부 소스와의 변환율 검색
* Web3 인스턴스를 JavaScript 객체로 웹 브라우저에 삽입
* 다른 클라이언트가 브라우저에 제공하거나 삽입한 Web3 인스턴스를 사용
* 로컬 또는 원격 이더리움 노드에서 RPC 서비스에 액세스

모바일(스마트폰) 지갑과 같은 일부 원격 클라이언트는 오직 기본적인 지갑 기능만 제공합니다. 다른 원격 클라이언트는 완전한 DApp 브라우저이다. 원격 클라이언트는 일반적으로 다른 곳에서 실행 중인 전체 노드(예: 사용자의 컴퓨터나 웹 서버에서 로컬에 의해 또는 서버의 제3자에 의해)에 연결하여 이더리움 블록체인의 로컬 복사본을 동기화하지 않고 전체 노드 이더리움 클라이언트의 일부 기능을 제공한다.

가장 인기 있는 원격 클라이언트와 원격 클라이언트가 제공하는 기능을 살펴보자.

[[mobile_wallets]]
==== 모바일(스마트폰) 지갑

((("mobile (smartphone) wallets")))((("remote clients","mobile wallets")))((("wallets","mobile"))) 스마트폰이 완전한 이더리움 클라이언트를 구동하기에 충분한 자원을 가지고 있지 않기 때문에 모든 모바일 지갑은 원격 클라이언트이다. Light 클라이언트는 개발 중이며 이더리움용으로 일반적으로 사용되지 않는다. Parity의 경우, light 클라이언트는 "실험적"으로 표시되며 -light 옵션으로 parity를 실행하여 사용할 수 있다.

인기 있는 모바일 지갑은 다음 사항들을 포함한다. (단지 예시로 나열할 뿐이다. 지갑의 보안이나 기능을 보증하거나 나타내는 것이 아니다.)

https://jaxx.io[Jaxx]:: ((("Jaxx","mobile version")))((("wallets","Jaxx"))) 비트코인, 라이트코인, 이더리움, 이더리움 클래식, ZCash, 다양한 ERC20 토큰 및 기타 통화를 지원하는 BIP-39 mnemonic seeds를 기반으로 하는 다중 통화 모바일 지갑이다. Jaxx는 안드로이드와 iOS에서 브라우저 플러그인 지갑으로, 그리고 다양한 운영 체제를 위한 데스크톱 지갑으로 사용할 수 있다.

https://status.im[Status]:: ((("Status (mobile wallet)"))) 다양한 토큰과 인기 있는 DApp을 지원하는 모바일 지갑과 DApp 브라우저이다. iOS 및 Android에서 사용할 수 있다.

https://trustwalletapp.com/[Trust Wallet]:: ((("Trust Wallet")))((("wallets","Trust"))) ERC20 및 ERC223 토큰은 물론 이더리움 및 이더리움 클래식을 지원하는 모바일 멀티 화폐 지갑이다. Trust Wallet은 iOS 및 Android에서 사용할 수 있다.

https://www.cipherbrowser.com[Cipher Browser]:: ((("Cipher Browser"))) 이더리움 앱 및 토큰과의 통합이 가능한 모든 기능의 이더리움 지원 모바일 DApp 브라우저 및 지갑이다. iOS 및 Android에서 사용할 수 있다.

[[browser_wallets]]
==== 브라우저 지갑

((("browser wallets")))((("remote clients","browser wallets")))((("wallets","browser wallets"))) 다양한 지갑과 DApp 브라우저가 크롬과 파이어폭스 같은 웹 브라우저의 플러그인이나 확장 기능으로 이용 가능하다. 브라우저 내에서 실행되는 원격 클라이언트이다.

가장 인기 있는 것들 중 일부는 MetaMask, Jaxx, MyEtherWallet, 그리고 MyCrypto이다.

[[MetaMask]]
===== MetaMask

https://metamask.io/[MetaMask], ((("MetaMask","as browser wallet"))) MetaMask는 <1>에서 소개되었고 다용도 브라우저 기반 지갑, RPC 클라이언트 및 기본 계약 탐색기이다. 크롬, 파이어폭스, 오페라, 브레이브 브라우저에서 사용할 수 있다.

MetaMask는 다른 브라우저 지갑과 달리 Web3 인스턴스를 브라우저 JavaScript 문맥에 주입하여 다양한 이더리움 블록체인(mainnet, Ropsten testnet, Kovan testnet, 로컬 RPC 노드 등)에 연결하는 RPC 클라이언트 역할을 한다. Web3 인스턴스를 주입하고 외부 RPC 서비스의 게이트웨이 역할을 하는 기능은 MetaMask를 개발자와 사용자 모두에게 매우 강력한 도구로 만든다. 예를 들어 Web3 공급자 역할을 하는 MyEtherWallet 또는 MyCrypto와 이러한 도구의 RPC 게이트웨이와 결합할 수 있다.

[[Jaxx]]
===== Jaxx

https://jaxx.io[Jaxx], ((("Jaxx","desktop version")))((("wallets","Jaxx"))) 이전 섹션에서 모바일 지갑으로 소개된 Jaxx는 크롬과 파이어폭스 확장 기능, 데스크톱 지갑으로도 사용이 가능하다.

[[MEW]]
===== MyEtherWallet (MEW)

https://www.myetherwallet.com/[MyEtherWallet] ((("MyEtherWallet (MEW)")))((("wallets","MyEtherWallet"))) MyEtherWallet은 브라우저 기반 JavaScript 원격 클라이언트이고 다음 사항을 제공한다.

* Trezor 및 Ledger와 같은 인기 있는 하드웨어 지갑으로 연결되는 다리
* 다른 클라이언트가 주입한 Web3 인스턴스(예: MetaMask)에 연결할 수 있는 Web3 인터페이스
* 이더리움 전체 클라이언트에 연결할 수 있는 RPC 클라이언트
* 계약의 주소 및 애플리케이션 바이너리 인터페이스(ABI)가 주어지면 스마트 계약과 상호 작용할 수 있는 기본 인터페이스
* MEWConnect라는 모바일 앱은 하드웨어 지갑처럼 호환되는 안드로이드나 iOS 기기와 사용하여 자금을 저장
* JavaScript에서 실행되는 소프트웨어 지갑

[주의]
====
MyEtherWallet 및 기타 브라우저 기반 JavaScript 지갑은 자주 피싱의 대상이 되므로 매우 주의해야 한다. 올바른 웹 URL에 액세스하려면 항상 검색 엔진이나 링크가 아닌 책갈피를 사용하십시오.
====

[[MyCrypto]]
===== MyCrypto

((("MyCrypto (wallet)")))((("wallets","MyCrypto")))((("MyEtherWallet (MEW)")))((("wallets","MyEtherWallet"))) 2018년 초에,  MyEtherWallet 프로젝트는 두 개의 독립 개발 팀에 의해 두 개의 경쟁 구현체로 분할되었다. 이는 "fork"라고 불리는데 오픈 소스 개발이라고 한다. 이 두 프로젝트는 MyEtherWallet(원래 브랜드)과 https://mycrypto.com/[MyCrypto]라고 불린다. MyCrypto는 MyEtherWallet과 거의 동일한 기능을 제공하지만 MEWConect를 사용하는 대신 Parity Signer 모바일 앱과의 연결을 제공한다. MEWConnect와 마찬가지로 Parity Signer는 핸드폰에 키를 저장하고 하드웨어 지갑과 유사한 방식으로 MyCrypto에 접속한다.

[[Mist]]
===== Mist (더 이상 사용되지 않음)

https://github.com/ethereum/mist[Mist] ((("Mist (browser-based wallet)")))((("wallets","Mist"))) Mist는 이더리움 재단이 만든 최초의 이더리움 지원 브라우저였다. ERC20 토큰 표준의 첫 구현체인 브라우저 기반 지갑을 포함하고 있다(ERC20의 원작자인 Fabian Vogelsteller도 미스트의 주요 개발자였다.). Mist는 또한camelCase checksum(EIP-55)을 도입한 최초의 지갑이기도 하다. 2019년 3월부터 Mist는 더 이상 사용되지 않는다.

=== 결론

이 챕터에서는 이더리움 클라이언트를 살펴보았다. 당신은 클라이언트를 다운로드, 설치, 동기화하여 이더리움 네트워크의 참여자가 되었고, 자신의 컴퓨터에 블록체인을 복제함으로써 시스템의 상태과 안정성에 기여했다. (((range="endofrange", startref="ix_03clients-asciidoc0")))